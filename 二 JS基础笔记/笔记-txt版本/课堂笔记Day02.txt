JSDay02：02.26
01-运算符导读
	目标：
		能够使用常用运算符
		能够说出前置递增和后置递增的区别
		能够说出运算符的优先级 （不作为要求）
		
02-算数运算符
	1. *常用运算符
		- 算数运算符
		- 递增和递减运算符
		- 比较运算符
		- 逻辑运算符
		- 赋值运算符
		
	2. 算数运算符
		1.算数运算符：算术运算使用的符号，用于执行两个变量或值的算术运算
		2.+-*/，%
			%取余，取模：返回除法的余数
			应用场景： 一个数能不能被另外一个数整除。***  
					   判断一个数是奇数还是偶数（能放被2整除）
				
		3.浮点数的精度问题
			在 某些 小数数字进行运算时，会出现丢失精度问题。比如0.1 + 0.2
			不要直接判断两个浮点数是否相等 ***（不能将参与运算的浮点数，再与另一个浮点数进行判断相等***）
			
			0.3 == 0.3    true 
			0.1 + 0.2 == 0.3   *** false

03-表达式和返回值
	1.表达式：是由数字、运算符、变量等以能求得数值的有意义排列方法所得的组合
		简单理解：是由数字、运算符、变量等组成的式子 ***

	2.表达式最终都会有一个结果，返回给开发者，称为返回值 （结果）  ***
	    //  是由数字、运算符、变量等组成的式子 我们成为表达式   1 + 1 
        console.log(1 + 1); // 2 就是返回值  console.log(2);
        
		// 1 + 1 = 2
        // 在我们程序里面  2 = 1 + 1 （num = 1 + 1 ）  把我们的右边表达式计算完毕把返回值给左边
        
		var num = 1 + 1;
        // 表达式，在程序中，会先进行运算，再操作  ***
        
        console.log(num);
        // 变量，在程序中，会先找变量存储的值，再操作  ***
		

04-*前置递增运算符(自增1)
	1.递增递减运算符：如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（ -- ）运算符来完成
	2.递增递减运算符分为：前置递增递减运算符，后置递增递减运算符。两者计算结果不同。
	3.语法：++num，相当于num=num+1
	4.口诀：先自加，后返回值  （先自加，后参与运算）
	5.例子：
		var  num = 10;
		alert(++num + 10);   // 21

05-*后置递增运算符
	1.语法：num++，相当于num=num+1
	2.口诀：先返回原值，后自加  （先参与运算，后自加）
	3.例子：
        var age = 10;
        console.log(age++ + 10); // 10 + 10  (为啥是先返回原值，age++，age在前)
        console.log(age); //11  （不管++在前还是在后，最终都会自增1）

        console.log(++age + 10); // 11 + 10  （为啥是先++，++age，++在前）
        console.log(age); //11  （不管++在前还是在后，最终都会自增1）
		
		
	递增是在单独一行书写，不会这么复杂。  ***
	var num = 10;
	num++;  // ++num;  //num = num +1;
	alert(num); //11
	
	var num = 10;
	num++;    // num++ --- 10  , num  -- 11
	10;
	alert(num); //11
	
	var num = 10;
	++num;    // ++num --- 11  , num  -- 11
	11;
	alert(num); //11
	
	
	应用场景： for 循环中应用自增 ***  i++
	
		
06-递增运算符练习 

07-前置递增和后置递增小结

08-比较运算符
	1.概念：比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true / false）作为比较运算的结果
	2. > , < , >= , <=  
	   ==   != (不相等)
	   ===  !== （不全相等） 
	   总结：相等，是两个等号==，不相等是!=，是将其中的一个等号换为! ,而不是增加一个感叹号
	   
	3. == 与 ===
		相等==： 内容相等即可
		全等===：内容和类型全都相等
		
	
		
	4. 补充：
	
		>= , <= , >,< ,==都可以做隐式转换
		console.log('3' >= 5);// 可以将'3'转换为3
		console.log('5' == 5);

09-逻辑运算符
	1.概念：逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。后面开发中经常用于多个条件的判断
		
		逻辑运算符，用于表示多个条件的关系  ***
	
	2.与或非
	   &&,||,!
	   
	3.逻辑与&&
		两边都是 true才返回 true，否则返回 false ***     （要求比较严格，必须都为true，才为true）     一个为false，就为false
		console.log(3 > 5 && 3 > 2); // false 
	4.逻辑或 ||
		两边都是 false才返回 false，否则返回 true ***    （要求比较宽松，只要有一个true，就为true）   都为false，才为false
		console.log(3 > 5 || 3 > 2); // true 
		
	5.逻辑非（!）也叫作取反符，用来取一个布尔值相反的值，如 true 的相反值是 false
	
	

10-逻辑运算符练习
11-逻辑中断逻辑与
	1.短路运算的原理：当有多个表达式（值）时,左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;
			
			逻辑运算，返回起决定性作用的一方。***  
			
	2.中断逻辑与  （碰到false，就中断***）
		console.log( 123 && 456 );        // 456 
		console.log( 0 && 456 );          // 0
		console.log( 123 && 456 && 789 );  // 789	
		
		console.log( 123 && 456 );        // 456
		console.log(3 > 5 && 3 > 2); // false
		console.log(false && true);  // false
	
12-逻辑中断逻辑或 
	1.中断逻辑或	（碰到true，就中断***）   
		 console.log( 123 || 456 );         //  123
		 console.log( 0 ||  456 );          //  456
		 console.log( 123 || 456 || 789 );  //  123
		 
	总结：***
		逻辑运算，返回起决定性作用的一方。***  (不管逻辑运算符左右两侧是否为boolean类型的值，都遵循此结论)
			如：	console.log(3 > 5 && 3 > 2); // 3 > 5 -- false
					console.log(3 > 5 || 3 > 2); // 3 > 2 -- true
		逻辑短路运算的原理：左边的表达式值可以确定结果时,就不再继续运算右边的表达式的值;（不管逻辑运算符左右两侧是否为boolean类型的值）
		逻辑与&&
			两边都是 true才返回 true，否则返回 false ***
		逻辑或 ||
			两边都是 false才返回 false，否则返回 true ***  
13-赋值运算符
	1.概念：用来把数据赋值给变量的运算符。
	2.=，+=，-=，*=，/=，%=
		x=，先操作，在赋值 ***
	3.例子
		var age = 10;
		age += 5;  // 相当于 age = age + 5;  
		age -= 5;  // 相当于 age = age - 5;
		age *= 10; // 相当于 age = age * 10;
		age++  ;   age = age + 1;

14-运算符优先级
	

15-流程控制分支结构导读
	目标：	
		能够使用 if 分支语句   ***
		能够使用 switch 分支语句
		能够使用三元表达式

16-流程控制
	1.流程控制就是来控制代码按照一定结构顺序来执行
	2.流程控制分类：
		顺序结构
		分支结构
		循环结构
	3.顺序结构
		程序会按照代码的先后顺序，依次执行
		
17-if分支语句
	1.分支结构：由上到下执行代码的过程中，根据不同的条件，执行不同的路径代码（执行代码多选一的过程），从而得到不同的结果
	2.JS 语言提供了两种分支结构语句：if 语句、switch 语句
	3.语法：
		// 条件成立执行代码，否则什么也不做
		if(条件表达式/值/变量) { // 如果是值和变量，if会做隐式转换，转换为boolean类型
			// 条件成立执行的代码语句
		}
		
18-进入网吧案例

	//弹出 prompt 输入框，用户输入年龄， 程序把这个值取过来保存到变量中
	// 使用 if 语句来判断年龄，如果年龄大于18 就执行 if 大括号里面的输出语句
	var age = prompt('请输入您的年龄:');
	if (age >= 18) {
		alert('我想带你去网吧偷耳机');
	}
	// if(条件表达式/boolean类型值/非boolean类型值)  ***
	if (true) {
		alert("我是true");
	}
	var flag = true; // flag会根据代码执行的逻辑，修改最终的值
	if (flag) {
		alert("我是true");
	}

	if (1) { // if() 会做隐式转换 ，会将其他类型的数据转换为boolean类型 ***
		alert("我是1");
	}

19-ifelse双分支语句 
	1.语法：
		// 条件成立  执行 if 里面代码，否则执行else 里面的代码
		if (条件表达式) {
			// [如果] 条件成立执行的代码
		} else {
			// [否则] 执行的代码
		}

20-判断闰年案例


	问题：1.
	
	
	
21-if else if多分支语句
	1.语法：
		// 适合于检查多重条件。
		if (条件表达式1) {
			语句1；
		} else if (条件表达式2)  {
			语句2；
		} else if (条件表达式3)  {
		   语句3；
		 ....
		} else {
			// 上述条件都不成立执行此处代码
		}

22-判断成绩案例
	 var score = prompt('请您输入分数:');
	 if (score >= 90) { // 这里的>= ， 如果是string与number进行比较，会做隐式转换  **
	 	alert('宝贝，你是我的骄傲');
	 }
	
	

23-三元表达式 ***
	1.三元表达式：简单的if  else （双分支） 的简写
	2.语法：表达式1 ? 表达式2 : 表达式3;
	3.如果表达式1为 true ，则返回表达式2的值，如果表达式1为 false，则返回表达式3的值
	
	 应用场景：简单的if  else:  if 和 else 中的代码只有一行。  ***
	 
		 if ( num == 1){
			num = 2;
		 }else{
			num = 3;
		 }
		 
		 表达式1 ? 表达式2 : 表达式3;
		 
		 num == 1 ? num = 2 : num = 3;
	
24-数字补0案例
25-switch语句
	1.switch为多分支语句，根据不同的条件执行不同的代码。
	2.语法：
		 switch( 表达式 ){  // 表达式常为一个变量  ***
			case value1: // 仅仅是值，不支持写表达式：>=value1  ***
				// 表达式 等于 value1 时要执行的代码
				break;
			case value2:
				// 表达式 等于 value2 时要执行的代码
				break;
			default:
				// 表达式 不等于任何一个 value 时要执行的代码
				break; //这个可以省略
		}
		
		switch: 判断一系列固定的值，比如星期。判断范围相当麻烦，一般不用。  ***
		if else ： 常用于判断范围，也可以判断固定值  ***
		
			课堂任务：  判断成绩案例，改为switch
			
			        switch (score) {
						case 100:
						case 99:
						case 98:
						// ....
						case 90:
							alert('宝贝，你是我的骄傲');
							break;

						default:
							break;
					}
					
					var score = prompt('请您输入分数:');
					if (score >= 90) {
						alert('宝贝，你是我的骄傲');
					} else if (score >= 80) { // <90
						alert('宝贝，你已经很出色了');
					} else if (score >= 70) {
						alert('你要继续加油喽');
					} else if (score >= 60) {
						alert('孩子，你很危险');
					} else {
						alert('熊孩子，我不想和你说话，我只想用鞭子和你说话');
					}
 
26-switch 注意事项
	- case理论上是可以有无限多个的
	- 关键字 switch 后面括号内可以是表达式或值， 通常是一个变量 ***
	- 关键字 case , 后跟一个选项的表达式或值，后面跟一个冒号
	- switch 表达式的值会与结构中的 case 的值做比较 
	- 如果表达式与case的value 全等 *** ，则与该 case 关联的代码块会被执行，并在遇到 break 时停止 ***，整个 switch 语句代码执行结束
	- 如果所有的 case 的值都和表达式的值不匹配，则执行 default 里的代码
	- 注意： 执行case 里面的语句时，如果没有break，则继续执行下一个case里面的语句 ***

27-查询水果案例
28-switch和ifelseif 区别 

	- 一般情况下，它们两个语句可以相互替换
	- switch...case 语句通常处理 case为比较确定值的情况， 而 if…else…语句更加灵活，常用于范围判断(大于、等于某个范围)
	- switch 语句进行条件判断后直接执行到程序的条件语句，效率更高。而if…else 语句有几种条件，就得判断多少次。
	- 当分支比较少时，if… else语句的执行效率比 switch语句高。
	- 当分支比较多时，switch语句的执行效率比较高，而且结构更清晰。 







