JSDay03：02.12
01-循环导读
	目标：
		能够说出循环的目的
		能够说出 for 循环的执行过程
		能够使用断点调试来观察代码的执行过程
		能够使用 for循环完成累加求和等案例
		能够使用双重 for 循环完成乘法表案例
		能够说出 while 循环和 do while 循环的区别
		能够说出 break  和 continue 的区别

02-*循环的目的
	目的：在实际问题中，有许多具有规律性的重复操作，因此在程序中要完成这类操作就需要重复执行某些语句

03-for循环语法结构
	1.循环分类：
		 for 循环  ***
		 while 循环
		 do...while 循环

	2.for语法：
		for(初始化变量; 条件表达式; 操作表达式 ){
			//循环体
		}
		初始化变量：通常被用于初始化一个计数器，该表达式可以使用 var 关键字声明新的变量，这个变量帮我们来记录次数。
		条件表达式：用于确定每一次循环是否能被执行。如果结果是 true 就继续循环，否则退出循环。
		操作表达式：每次循环的最后都要执行的表达式。通常被用于更新或者递增计数器变量。当然，递减变量也是可以的。
		循环体：在程序中，一组被重复执行的语句被称之为循环体
	3.例子
		for (var i = 1; i <= 100; i++) {
            console.log('你好吗');
        }
		
		for (var i = 100; i >= 1; i--) {
            console.log('你好吗');
        }
		
04-*for循环执行过程  ***
	1. 初始化变量 var i = 1，初始化操作在整个 for 循环只会执行一次。
	2. 执行条件表达式 i<= 100，如果为true，则执行循环体语句 console.log('你好吗')，否则退出循环，循环结束。
	3. 如果没有退出，则执行操作表达式 i++，此时第一轮结束。
	4. 第二轮开始，直接去执行条件表达式（不再初始化变量），如果为 true ，则去执行循环体语句，否则退出循环。
	5. 如果还没有退出，则继续执行操作表达式，第二轮结束。
	6. 后续跟第二轮一致，直至条件表达式为假，结束整个 for 循环。
	
	个人理解：  小任务，自己写for循环执行流程
		for (var i = 1; i <= 100; i++) {  
            console.log('你好吗');//循环体
        }
		1. 初始化：var i = 1 
			初始化变量，初始化只执行一次。 （如果执行多次，死循环）
		2. 条件：i <= 100 
			i的值一旦变化，就要判断 条件表达式：i <= 100 是否成立
		3. 循环体`
			条件表达式一旦成立，就会执行循环体。 否则，不执行。
		4. 操作表达式：i++
			最后执行 操作表达式：i++，因为i如果不变化，那么永远为1，就为死循环了。
		    操作表达式执行完，i又变化了，所以再执行第二步。
			
		1,2,3,4
		2,3,4
		2,3,4

05-*断点调试 ***
	1.断点调试:
		是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会暂停，然后你可以一步一步往下调试（F11），
		调试过程中可以看各个变量当前的值，
		我们主观的判断这个变量的值是否正确，如果错误，那就找到问题所在了。
	
	2. 断点调试可以帮我们观察程序的运行过程 , 然后发现bug，解决bug。
	
	3. Watch: 监视，通过watch可以监视变量的值的变化
	
	4.  1. 打断点  （js代码第一行）
		2. 刷新，运行程序
		3. 观察变量
		4. 发现问题
	
06-for循环重复执行相同代码
	for(var i = 1; i <= 10; i++){
		console.log('媳妇我错了~');
	}

07-for循环重复执行不同代码
	1.for 循环还可以重复不同的代码，这主要是因为使用了计数器 ，计数器在每次循环过程中都会有变化。

	2.例子：输出一个人1到100岁
		for (var i = 1; i <= 100; i++) {
			console.log('这个人今年' + i + '岁了');
		}
	3.例子：输出1到100岁，并提示出生、死亡
		// for 里面是可以添加其他语句的 
		for (var i = 1; i <= 100; i++) {
			if (i == 1) {
				console.log('这个人今年1岁了， 它出生了');
			} else if (i == 100) {
				console.log('这个人今年100岁了，它死了');
			} else {
				   console.log('这个人今年' + i + '岁了');
			}
		}

08-for循环重复某些操作
	求1-100之间所有整数的累加和
		var sum = 0;
		for(var i = 1;i <= 100; i++){
				sum += i;
		}
		console.log('1-100之间整数的和 = ' + sum);
		
		for(var i = 100;i >= 1; i--){
				sum += i;
		}
		
		
	for循环步骤：  ***
			1. 确定初始值
			2. 确定范围
			3. 循环体
			i : 迭代器 ：iterator   ， 迭代也称之为循环
			   索引  ： index

09-for循环案例
10-求学生成绩案例（上）
11-求学生成绩案例（下）
12-一行打印五颗星星
13-双重for循环执行过程 ***
	1.双重for循环：
		循环嵌套是指在一个循环语句中再定义一个循环语句的语法结构，例如在for循环语句中，可以再嵌套一个for 循环，
		这样的 for 循环语句我们称之为双重for循环。
	2.语法：
		for (外循环的初始; 外循环的条件; 外循环的操作表达式) {
			for (内循环的初始; 内循环的条件; 内循环的操作表达式) {  
			   需执行的代码;
		   }
		}
	3.注意：
		内层循环可以看做外层循环的语句
		内层循环执行的顺序也要遵循 for 循环的执行顺序 
		外层循环执行一次，内层循环要执行全部次数

14-打印5行5列的星星
	1.代码：
		var str = '';
		for (var i = 1; i <= 5; i++) { // 外层循环负责打印五行
			for (var j = 1; j <= 5; j++) { // 里层循环负责一行打印五个星星
				str = str + '★';
			}
			// 如果一行打印完毕5个星星就要另起一行 加 \n
			str = str + '\n';
		}
		console.log(str);
		
		
		
	2.注意：
		内层循环控制列
		外层循环控制行

15-打印n行n列的星星
16-打印倒三角形案例
17-九九乘法表
	分析结论：
		1. 列数等于行号：内层循环的条件：j<=i
		2. 看图说话：从第二行开始看： 第二个乘数 正好是行号 ， 第一个乘数是列号
		当天资料的素材中有此分析图

18-for循环小结
	- for 循环可以重复执行某些相同代码
	- for 循环可以重复执行些许不同的代码，因为我们有计数器
	- for 循环可以重复执行某些操作，比如算术运算符加法操作
	- 随着需求增加，双重for循环可以做更多、更好看的效果
	- 双重 for 循环，外层循环一次，内层 for 循环全部执行
	- for 循环是循环条件和数字直接相关的循环

19-while循环
	1.while 语句可以在条件表达式为真的前提下，循环执行指定的一段代码，直到表达式不为真时结束循环。
	2.语法：	
		while (条件表达式) {
			// 循环体代码 
		}
	3.执行流程：
		- 先执行条件表达式，如果结果为 true，则执行循环体代码；如果为 false，则退出循环，执行后面代码
		- 循环体代码执行完毕后，程序会继续判断执行条件表达式，如条件仍为true，则会继续执行循环体，直到循环条件为 false 时，整个循环过程才会结束
	4.注意：	  
		- 使用 while 循环时一定要注意，它必须要有退出条件，否则会成为死循环
		- while 循环和 for 循环的不同之处在于 while 循环可以做较为复杂的条件判断，比如判断用户名和密码
	
	var num = 1;
	var sum=0;
	while (num <= 100) {
		sum+=num;
		num++;
		//sum+=num;
		
	}
	
	var sum = 0;
	for(var i = 1;i <= 100; i++){
			sum += i;
	}
	
	var i = 1;
	for(  ; i <= 100 ; ){
		sum += i;
		i++;
	}
	
	var message = prompt('你爱我吗?');
	while (message !== '我爱你') {
		message = prompt('你爱我吗?');
	}
	alert('我也爱你啊！');
	
	
	var message = prompt('你爱我吗?');
	for( ; message !== '我爱你' ;){
		message = prompt('你爱我吗?');
	}
	alert('我也爱你啊！');
	
	
	

20-while案例
	1. 打印人的一生，从1岁到100岁
		var i = 1;
		while (i <= 100) {
			console.log('这个人今年' + i + '岁了');
			i++;
		}
	2.其实while循环也有，初始化变量，条件表达式，循环体代码，操作表达式
	
21-do while循环
	1.do... while 语句其实是 while 语句的一个变体。
		该循环会先执行一次代码块，然后对条件表达式进行判断，如果条件为真，就会重复执行循环体，否则退出循环。
	2.语法：
		do {
			// 循环体代码 - 条件表达式为 true 时重复执行循环体代码
		} while(条件表达式);
	3.执行流程：
		- 先执行一次循环体代码 
		- 再执行条件表达式，如果结果为 true，则继续执行循环体代码，如果为 false，则退出循环，继续执行后面代码	

	4.while与do while的区别：
		while先判断条件，再执行循环体 
		do while，先执行一次循环体，再判断条件   ( 如果需要先做一次，才知道是否要开始循环------ do while)
		do while至少执行一次循环体代码
		
		
22-do while案例
	1. 打印人的一生，从1岁到100岁
        var i = 1;
        do {
            console.log('这个人今年' + i + '岁了');
            i++;
        } while (i <= 100)

23-循环小结
	- JS 中循环有 for 、while 、 do while 
	- 三个循环很多情况下都可以相互替代使用
	- 如果是用来计次数，跟数字相关的，三者使用基本相同，但是我们更喜欢用 for
	- while 和 do…while 可以做更复杂的判断条件，比 for 循环灵活一些 
	- while 和 do…while 执行顺序不一样，while 先判断后执行，do…while 先执行一次，再判断执行
	- while 和 do…while 执行次数不一样，do…while 至少会执行一次循环体， 而 while 可能一次也不执行
	- 实际工作中，我们更常用for 循环语句，它写法更简洁直观， 所以这个要重点学习 ***

	如何选择循环语句？ ***
		1. 确定循环次数
			for:  循环条件一般是一个范围  
		2. 不确定循环次数 或 循环条件可以比较复杂
			while：  先判断，再做
			do while：先做，再判断（先执行一次，才知道是否要开始循环 ： 你爱我么？  ）
			
			
		//while循环最常用应用场景： 写死循环  
		while (true) {
			// 如果满足某个条件，跳出
			break;
		}
		
		 do {
            var message = prompt('你爱我吗?');
         }while (message !== '我爱你')
		 
         alert('我也爱你啊');

         var message = prompt('你爱我吗?');
         while (message !== '我爱你') {
             message = prompt('你爱我吗?');
         }
         alert('我也爱你啊！');
		
		
		 while (true) {
            var message = prompt('你爱我吗?');
            if (message == '我爱你') {
                // 如果满足某个条件，跳出
                break;
            }
        }

24-continue关键字  ***
	1.continue 关键字用于立即跳出本次循环，继续下一次循环（本次循环体中 continue 之后的代码就会少执行一次）。
		continue： 继续，继续下次循环，跳过本次循环
	
25-break关键字  ***
	1.break 关键字用于立即跳出整个循环（循环结束）。
	
		break： 终止

26-命名规范以及语法格式
	1.标识符命名规范
		- 变量、函数的命名必须要有意义
		- 变量的名称一般用名词  
		- 函数的名称一般用动词  
	2.操作符规范
		- 操作符的左右两侧各保留一个空格
			for (var i = 1; i <= 5; i++) { //i++除外
			   if (i == 3) {
				   break; // 直接退出整个 for 循环，跳到整个for循环下面的语句
			   }
			   console.log('我正在吃第' + i + '个包子呢');
			}

27-循环作业
	今日课堂任务：
		1.自己写for循环执行流程
		2.求1-100之间所有能被3整除的数字的和 , 平均数 
		
			 通过另外的一个变量，count，记录 满足条件的有即可 （count++）
		
		3.使用switch写Day02-05作业题，简写即可












