JsDay01：
01-计算机基础导读
	目标：
		能够说出什么是编程语言 
		能够区分编程语言和标记语言的不同
		能够说出常见的数据存储单位及其换算关系
		能够说出内存的主要作用以及特点
02-编程语言
	*编程语言是用来控制计算机的一系列指令，它有固定的格式和词汇（不同编程语言的格式和词汇不一样），必须遵守。
	*编程语言与标记语言的区别：
		编程语言有很强的逻辑和行为能力，标记语言没有。
	
			逻辑：  如果满足条件，执行，如果不满足，不执行
			
						if  1==1:
							alert('正确')
					
					先做什么，后做什么
					
	
	编程语言有机器语言（二进制：010101）、汇编语言、高级语言
	高级语言需要一个翻译器转换为计算机识别的机器语言
	
	语言： 人与人沟通的工具
	计算机语言： 人与计算机沟通
	编程语言： 通过编程语言，来写代码，来编程 
	
	编程： 编写程序（软件，网站，app），写代码

	
03-计算机基础
	*常见的数据存储单位及其换算关系:
		- 位(bit)：   1bit 可以保存一个 0 或者 1 （最小的存储单位）  （位置）
		- 字节(Byte)：1B = 8b
		- 千字节(KB)：1KB = 1024B  （1024整）
		- 兆字节(MB)：1MB = 1024KB
		- 吉字节(GB):  1GB = 1024MB
		- 太字节(TB):  1TB = 1024GB
	
	*内存的主要作用以及特点:
		内存作用：存储运行中的程序的数据
		内存特点：运行速度极快，断电数据丢失
		
		硬盘： 1-2T  （存储数据）
		内存： 8-16G   （存储程序运行中的数据）
		
		
		vlc播放视频 ： 将硬盘中的数据，读取到内存中
		


04-JavaScript初识导读
	目标：	
		能够说出 JavaScript 是什么
		能够知道 JavaScript 的发展历史
		能够说出浏览器执行 JavaScript 的原理
		能够说出 JavaScript 由哪三部分组成
		能够写出 JavaScript 三个输入输出语句


05-初识JavaScript
	*JavaScript：是一种运行在客户端（用户电脑上的浏览器）的脚本语言   ***
	
	脚本语言：不需要编译，运行过程中由 js 解释器( js 引擎）逐行来进行解释并执行
	
		编译型语言：java ： 1. 编译：翻译   2. 运行       （java ---- 翻译（编译） --- 0101）
		解释型语言：JavaScript   1，运行过程中解释（翻译） （JavaScript  ---- 翻译（解释）  ---- 0101）
		
		js 解释器( js 引擎） ： 翻译器
	
	*JavaScript 的发展历史：布兰登·艾奇10天完成开发，刚开始叫做LiveScript，后改名为JavaScript。
	
	JS作用：
		- 表单动态校验（密码强度检测）  （ JS 产生最初的目的 ）
		- 网页特效
		- 服务端开发(Node.js)  （后端）
		- 桌面程序(Electron)
		- App(Cordova) 
		- 控制硬件-物联网(Ruff)
		- 游戏开发(cocos2d-js)

	

06-浏览器执行JS过程
	*浏览器执行 JavaScript 的原理：
		浏览器通过内置的JS引擎执行代码，逐行解释每一句源码（转换为机器语言），然后由计算机去执行，所以 JavaScript 语言归为脚本语言，会逐行解释执行。
		
			逐行解释执行***
		
			JS引擎 ：Js解释器 ， 将js高级语言转换为机器语言0101.  ***

07-JS三部分组成
	*JavaScript 由哪三部分组成：	
		ECMAScript：Js语法
		DOM：文档对象模型  ， 文档：html文档  ，操作html文档  （操作html文档的工具）
		BOM：浏览器对象模型 ， 操作浏览器的工具					

	ECMAScript：规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准
	DOM：文档对象模型（DocumentObject Model，简称DOM），是W3C组织推荐的处理可扩展标记语言的标准编程接口。
		 通过 DOM 提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）
			接口： 属性，方法
	BOM：浏览器对象模型(Browser Object Model，简称BOM) 
		它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。
		
08-JS三种书写位置
	1. 行内式的js ：直接写到元素的内部 ，用的比较少
     <input type="button" style="" value="唐伯虎" onclick="alert('秋香姐')">
	 
		onclick : on当，click点击。当点击发生时，执行什么代码
	 
	2.内嵌式的js ：学习时常用的方式
		<script>
			alert('沙漠骆驼');
		</script>
	
	3. 外部js ：工作中常用
		<script src="my.js"></script>

	注意：  外链式不要与内嵌式混用 ***  <!-- 外部式不能与内嵌式混用，外部式会将内嵌式的代码覆盖 -->
	源：source

09-JS注释
	// 1. 单行注释  ctrl + /
	/* 2. 多行注释  默认的快捷键 shift +  alt  + a
	   2. 多行注释  vscode 中修改多行注释的快捷键：  ctrl + shift + /
	*/
	
	注意：  多行注释，无法嵌套

10-JS输入输出语句
	*JavaScript 三个输入输出语句：
		浏览器弹出警示框：alert('msg')
		浏览器控制台打印输出信息：console.log('msg')   ： 控制台log日志输出 ， 日志，记录程序执行过程中的信息
		浏览器弹出输入框，用户可以输入：prompt('提示信息')
		
		js写出的程序/网站：用户与计算机进行沟通
		谁输入 ： 用户
		谁输出 ： 计算机输出
		
		console.log ： 控制台 的 日志
		
		
11-变量导读  ***
	目标：
		能够说出变量的主要作用
		能够写出变量的初始化
		能够说出变量的命名规范
		能够画出变量是如何在内存中存储的
		能够写出交换变量案例


12-什么是变量
	*变量：是用于存放数据的容器  （数据：内存中的数据，程序运行中的数据）
	
		变量 ： 变化的量，变化的内容，变化的数据
	
	本质：变量是程序在内存中申请的一块用来存放数据的空间。类似我们酒店的房间，一个房间就可以看做是一个变量。 
		js声明变量-----旅客去酒店开房。
			旅客去酒店开房：
				1.酒店开房（在内存条开辟空间，开辟的空间叫做变量）
					酒店：内存条
					房间：变量 
					
				2.旅客入住房间（数据放入变量中存储）
					旅客：数据
				
				补充：房间号：变量名 （通过变量来找到内存条中存储的数据）
			
	
13-变量的使用
	使用步骤：1.变量声明 2.变量赋值
	1.变量声明：定义变量，创建变量  （酒店开房）
		语法：var 变量名;
		var：variable 变量
		
		关键字：js中有特殊作用的词。
			var: 声明变量
	
	2.变量赋值：  （旅客入住房间）
		语法：变量名 = 值;
		用等号赋值。
		等号：不是相等，1+1=2.  而是赋值，将值赋给变量
		
	*3.变量的初始化 （变量声明+变量赋值）
		var 变量名 = 值;
		console.log(变量名); //变量使用时不能添加引号 （声明的时候，没有引号，用的时候肯定也不能有）
		
		// 1. 声明了一个age 的变量 
        var age;
        // 2. 赋值  把值存入这个变量中
        age = 18;
        // 3. 输出结果 
        console.log(age); // 18
        age = 16; // 量可以变化
        console.log(age);

14-变量案例
	变量赋值时，值如果是字符串需要添加'',“”
	每行代码结束，都需要添加;
	
	    var myname = '旗木卡卡西';  // 字符串
        var address = '火影村';
        var age = 30;  // 数字
        var email = 'kakaxi@itcast.cn';
        var gz = 2000;
		
		
        console.log(myname);
        console.log(address);
        console.log(age);
        console.log(email);
        console.log(‘gz’); // gz
		console.log(gz); // 2000
		
		// 变量在使用时，不能添加引号 （定义，声明变量的时候，没有引号，使用的时候自然也不能添加引号）
		// 编写代码过程中：
			每一行结束，应该添加;  (js的规范)

15-变量案例弹出用户名

	    // 1. 用户输入姓名  存储到一个 myname的变量里面
        var myname = prompt('请输入您的名字');
        // prompt 做的事情：
        // (1). 弹出输入框 , 用户输入内容:zs
        // (2). 将用户输入内容返回 ，相当于 ：var myname = 'zs';
        // 2. 输出这个用户名
        alert(myname); // zs
	

16-变量语法扩展
	1.变量初始化之后，可以重新赋值，这个叫做变量更新。
	
		var myname = 'pink老师';
        console.log(myname);
        myname = '迪丽热巴';
        console.log(myname);
		
		变量: 变化的量，变化的值。
		
		常量：不变化的量，常态的量。
	
	2.同时声明多个变量  , 以英文逗号分隔  (了解)
		同时初始化多个变量：
			var age = 10,  name = 'zs', sex = 2;
			
		同时声明多个变量：
			var age ,  name , sex ;
		同时赋值多个变量：
			age = 10 ， name = 'zs' , sex = 2;
		
	3.特殊情况***
		1.只声明 不赋值：undefined   ***
			var age; // 变量的默认值就是undefined  ， 未定义 ：值没有定义，没有赋值  （不是变量未定义）
			
					未定义： 变量未定义，值未定义
					
		
		2.不声明 不赋值: 报错，xxx is not defined  : xxx 没有定义   （变量没有定义）
			console.log(age);   
		
		3.不声明 只赋值: 正常，但不规范
			age = 18;   
			
			js是一种弱类型语言，语法不规范。
					
		4.  console.log(name); // 空字符串，浏览器内部留用的一个变量（不声明，不赋值，可以直接使用，不报错）
			

17-*变量的命名规范 ***

	由字母(A-Za-z)、数字(0-9)、下划线(_)、美元符号( $ )组成，如：userAge, num01, _name

	严格区分大小写。var app; 和 var App; 是两个变量

		var app = 1;
		var app = 2;
		var App = 3;
	
	不能 以数字开头。  18age   是错误的

	不能 是关键字、保留字。例如：var、for、while

	变量名必须有意义，见名知意。  （建议）   

	遵守驼峰命名法。首字母小写，后面单词的首字母需要大写  （建议）


18-*交换2个变量的值***
	交换两个变量apple1，apple2的值：
	// 1. 我们需要一个临时变量帮我们
    // 2. 把apple1 给我们的临时变量 temp 
    // 3. 把apple2 里面的苹果给 apple1
    // 4. 把临时变量里面的值 给 apple2 

	
	js 是编程语言有很强的逻辑性在里面： 实现这个要求的思路 先怎么做后怎么做 
	
19-变量小结
	为什么需要变量？			
	变量是什么？				
	变量的本质是什么?			
	变量怎么使用的？			
								
	什么是变量的初始化？		
	变量命名规范有哪些？		
	交换2个变量值的思路？

20-数据类型导读
	目标：	
		能够说出5种简单数据类型
		能够使用 typeof 获取变量的类型
		能够说出1~2种转换为数值型的方法 
		能够说出1~2种转换为字符型的方法
		能够说出什么是隐式转换

21-数据类型简介
	数据类型就是数据的类别型号：
		不同的数据所需占用的存储空间是不同的，为了便于把数据分成所需内存大小不同的数据，充分利用存储空间，于是定义了不同的数据类型
		
	JavaScript 是一种弱类型或者说动态语言
		声明变量后，无法确定变量的数据类型。只能赋值之后才能确定。
	
	JavaScript 拥有动态类型，同时也意味着相同的变量可用作不同的类型
		一个变量，先存储数字，再重新赋值为字符串。
	
	js是一种弱类型语言，
		1.语法不规范。
		2.在声明变量时，没有强制规定变量类型。
			js:统一使用var。
				var num = 10;
				var str = 'zs';
			java: 强类型
				int num;
				string str;
	

22-数字型Number
	JS 把数据类型分为两类：
		- *简单数据类型 （Number,String,Boolean,Undefined,Null）
		- 复杂数据类型 （object：对象)	
		
	数字型进制：
		最常见的进制有二进制、八进制、十进制、十六进制。
		
			十进制：0-9，逢10进1
				12: 2*10的0次方+1*10的1次方 =  12
			
			十六进制：0-9，a-f ， 逢16进1
			
				0x29 :  9 * 16的 0次方 + 2* 16的 1次方  = 41
				
			八进制： 0-7  逢8进1
			
				023 ： 3* 8的0次方 + 2* 8的1次方  = 19
			
		
	数字型范围：
		- 最大值：Number.MAX_VALUE，这个值为：1.7976931348623157e+308  （10的正308次方）
		- 最小值：Number.MIN_VALUE，这个值为：5e-324 （10的负324次方）
		
			点：理解为的
			
	数字型三个特殊值：
		- Infinity ，代表无穷大，大于任何数值
		- -Infinity ，代表无穷小，小于任何数值
		- NaN ，Not a number，代表一个非数值   （字符串与数值做运算）
		
			属于Number的一份子： Number数据类型，将数据分成了 数字  和  非数字。

23-isNaN
	isNaN()：用来判断一个变量是否为非数字的类型，返回 true(真) 或者 false（假）
	
	isNaN()是一个方法： 实现了某个功能的一段代码
	
	返回：当前isNaN方法的结果
	

	
	var myname = 'egg';
	// 如果小括号中是一个变量，先根据变量的名字，找到变量的值，然后再打印
	console.log(myname);
	console.log('twoEgg');
	// 如果小括号中是个方法，先执行方法，将方法的结果，进行打印
	console.log(isNaN(12));
	
24-字符串型String
	1.字符串型可以是引号中的任意文本，其语法为 双引号 "" 和 单引号''
	2.字符串引号嵌套
		单套双，双套单
	3.字符串转义符
		类似HTML里面的特殊字符，字符串中也有特殊字符，我们称之为转义符
		
			<> : &lt; &gt; 
			空格：&nbsp;
		
		转义符以\开头
		常用转义符：
			换行符：\n  --- newline 
			斜杠：\\
			tab缩进：\t
			退格：\b --------------视频中有问题
			
				\b 是退格，不是空格
			
		转义符：\ ,  将特殊字符转义为非特殊字符，非特殊字符转义为特殊字符  ***
		
							‘ ---- \'				n ----- \n
							
		
25-弹出网页警示框-案例

26-字符串长度以及拼接  ***
	1.通过length属性获取字符串长度。
		var str=“”;
		str.length;
		
			length : 实现了某个功能的代码
	
	2.多个字符串之间可以使用 + 进行拼接
	3.字符串与任意类型数据 + 拼接，都会变为字符串
	
		+ : 1. 相加 ， 两边都是数字  
			2. 拼接 ， 两边只要有一个字符串
	
	4.补充：***
		//console.log(isNaN(12))   
        // （）里边是一个方法，先执行方法，然后再去处理方法的结果
        // console.log(12 + 12); 
        // () 里边是一个表达式，先计算表达式的结果，然后再去处理这个结果
        // 因为是log的(): console.log() ，所以是将结果打印出来
		
		
		var myname = 'egg';
		// 如果小括号中是一个变量，先根据变量的名字，找到变量的值，然后再打印
		console.log(myname);
		console.log('twoEgg');
		// 如果小括号中是个方法，先执行方法，将方法的结果，进行打印
		console.log(isNaN(12));
	
27-字符串拼接加强
	1.代码中经常会将字符串和变量来拼接，变量可以很方便地修改里面的值
	2.如果要将写死的字符串，通过变量写活，可以使用“引引加加”
		'今年我10岁啦' ----- '今年我’+age+‘岁啦'
		
		
		var str = '今年我’+age+‘岁啦';
		
		1. '今年我’+age    ----  '今年我18’
		2. '今年我18’+‘岁啦';
		3. '今年我18岁啦';
		
		js引擎执行代码的规律：
		
			1. 由上至下
			2. 由左至右

28-显示年龄案例

29-boolean以及undefined和null
	1.布尔类型有两个值：true 和 false ，其中 true 表示真（对，有，1），而 false 表示假（错，无，0）。
	
		var flag = false;//true;
		
		flag: 标记
	
	2.布尔型和数字型相加的时候， true 的值为 1 ，false 的值为 0。
	3.undefined：只声明未赋值的变量，变量的默认值。
		var variable;
		console.log(variable);           // undefined
		console.log('你好' + variable);  // 你好undefined
		console.log(11 + variable);     // NaN
		console.log(true + variable);   //  NaN
	4.null
		var vari = null;
		console.log('你好' + vari);  // 你好null
		console.log(11 + vari);     // 11 , 空代表没有，意味0
		console.log(true + vari);   //  1
		
		只有字符串需要添加引号，其他的都不需要添加：  数字，true，false，undefined，null，变量名

30-typeof检测变量数据类型
	typeof 可用来获取检测变量的数据类型：
		typeof xxx
		typeof(xxx)  ***
		xxx可以直接是一个数据值，也可以是一个变量
	typeof 检测结果是什么类型？
		typeof typeof xxx
		typeof(typeof(xxx))
		
		var result = typeof num;
        console.log(typeof result);
		//console.log(typeof typeof num);
		
		typeof 返回的是变量的数据类型的单词，这个单词是字符串
		
	null ： typeof null ---- object   : 空对象
		历史遗留问题
		
		
		- *简单数据类型 （Number,String,Boolean,Undefined,Null）
		- 复杂数据类型 （object：对象)	

31-字面量
	字面量：从字面意思就可以知道是什么数据类型。
		十进制数字字面量：0-9组成的数字
		字符串字面量：‘’ “”
		布尔字面量：true，false

32-转换为字符串类型
	1.数据类型转换：把一种数据类型转换成另外一种数据类型,但是内容不变
	2.常见的三种转换：
		- 转换为字符串类型
		- 转换为数字型
		- 转换为布尔型
	3.转换为字符串类型
		1.xxx.toString()					（显示转换）  ***  
		2.String(xxx)						（显示转换）
		3.xxx+""，通过+空字符串来实现转换   （隐式转换）
		
		var age =18;
		var age_str = age + "";


33-转换为数字型parseInt和parseFloat   ***
	
	parseInt(String)将字符串类型转为整数类型
		var num1 = parseInt("12.3abc");  // 返回12，如果第一个字符是数字会解析直到遇到非数字结束
		var num2 = parseInt("abc123");   // 返回NaN，如果第一个字符不是数字或者符号就返回NaN
		Int：integer，整数
		parse：解析，转换
		
	parseFloat(String)
		parseFloat()把字符串转换成浮点数
		parseFloat()和parseInt非常相似，不同之处在与
			parseFloat会解析第一个. 遇到第二个.或者非数字结束
			如果解析的内容里只有整数，解析成整数
		parseFloat('12.34'); // 12.34
		parseFloat('12.34.56');  12.34
		parseFloat('12.34a'); // 12.34
		parseFloat('12'); // 12
		
		Float : 小数
			
	

34-转换为数字型Number和隐式转换
	Number()将字符串转换成数值，如果要转换的字符串中有一个不是数值的字符，返回NaN
	运算符：- * / ， 正+负-  （隐式转换）
		var str = '500';
		console.log(+str);		// 取正  ***
		console.log(-str);		// 取负,类型转换了，但是值变化了
		console.log(-(-str));
35-计算年龄案例
36-简单加法器案例
37-转换为布尔型
	1.语法：Boolean(xxx)
	2.代表空、否定的值会被转换为 false  ，如 ''、0、NaN、null、undefined    ***

38-拓展阅读之编译和解释语言的区别
	1.翻译器翻译的方式有两种：一个是编译，另外一个是解释。两种方式之间的区别在于翻译的时间点不同
	2.编译器是在代码执行之前进行编译，生成中间代码文件
	3.解释器是在运行时进行及时解释，并立即执行(当编译器以解释方式运行的时候，也称之为解释器)

		编译：  先编译，再执行
		解释：  直接执行（逐行解释再运行）
	
39-拓展阅读之标识符关键字保留字
	关键字：break、case、catch、continue、default、delete、do、else、finally、for、function、if、in、instanceof、new、return、switch、this、throw、try、typeof、var、void、while、with 
	保留字：boolean、byte、char、class、const、debugger、double、enum、export、extends、fimal、float、goto、implements、import、int、interface、long、mative、package、private、protected、public、short、static、super、synchronized、throws、transient、volatile
		

40-课后作业	
	

 